import { Box, Typography, useTheme } from "@mui/material";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import { tokens } from "../../theme";
import Header from "../../components/Header";
import { useEffect, useState } from "react";
import PersonaService from "../../service/PersonaService";
import { PrimeIcons } from 'primereact/api'
import { Menubar } from 'primereact/menubar';
import "primereact/resources/themes/lara-light-indigo/theme.css";  //theme
import "primereact/resources/primereact.min.css";                  //core css
import "primeicons/primeicons.css";
import { Dialog } from 'primereact/dialog';
import { InputText } from 'primereact/inputtext';
import { Button } from 'primereact/button';
import { Dropdown } from 'primereact/dropdown';
import '/node_modules/primeflex/primeflex.css'

const Team = () => {

  const [personas, setPersonas] = useState([]);
  const [selectedPersona, setSelectedPersona] = useState(null)
  const [showModal, setShowModal] = useState(false);
  const [id, setId] = useState('');
  const [nombre, setNombre] = useState('')
  const [apellido, setApellido] = useState('')
  const [empresa, setEmpresa] = useState('')
  const [cargo, setCargo] = useState('')
  const [saveSucces, setSaveSucces] = useState(false);

  useEffect(() => {
    let personaService = new PersonaService();
    personaService.getAll().then(res => setPersonas(res));
  }, [!saveSucces])

  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  // CONTENIDO (ARRAYS) 
  const items = [
    {
      label: 'Nuevo',
      icon: PrimeIcons.PLUS,
      command: () => { showSaveModal(true) }
    },
    {
      label: 'Editar',
      icon: PrimeIcons.PENCIL,
      command : () => {edit()}
    },
    {
      label: 'Eliminar',
      icon: PrimeIcons.TRASH,
      backgroundColor: colors.blueAccent[700]
    }
  ]

  const nEmpresa = [
    { label: 'Cascoloco', value: 'Cascoloco' },
    { label: 'Distri Fabrica', value: 'DistriFabrica' },
    { label: 'Mottodo Outtlet', value: 'Mottodo Outtlet' },

  ];

  const nCargo = [
    { label: 'Asesor Comercial', value: 'Asesor Comercial' },
    { label: 'Lider Tienda', value: 'Lider Tienda' }

  ];

  const columns = [
    { field: "id", headerName: "ID", flex: 0.5 },
    {
      field: "nombre",
      headerName: "Nombre",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "apellido",
      headerName: "Apellido",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "empresa",
      headerName: "Empresa",
      flex: 1,
    },
    {
      field: "cargo",
      headerName: "Cargo",
      flex: 1,
    },
    {
      field: "fechacreacion",
      headerName: "Creado",
      flex: 1,
    }
  ];

  // FUNCIONES 

  // CREAR USUARIOS 

  const save = () => {
    let persona = {};
    if (id !== '') {
      persona.id = id;
    }
    persona.nombre = nombre;
    persona.apellido = apellido;
    persona.empresa = empresa;
    persona.cargo = cargo;
    
     let personaService = new PersonaService();
    personaService.save(persona).then(res => {
      setNombre('');
      setApellido('');
      setEmpresa('');
      setCargo('');
      setShowModal(false);
      setSaveSucces(!saveSucces);         
    });
  };

  const renderFooter = () => {
    return (
      <div>
        <Button label="Cancelar" icon="pi pi-times" onClick={() => setShowModal(false)} className="p-button-text" />
        <Button label="Confirmar" icon="pi pi-check" onClick={() => save()} autoFocus />
      </div>
    );
  }

  // EDITAR USUARIOS 

  const showSaveModal = () => {
    setId('');
    setNombre('');
    setApellido('');
    setEmpresa('');
    setCargo('');
    setShowModal(true);
    setSaveSucces(!saveSucces);  
};

  const edit = () => {
    setNombre();
    // setApellido(selectedPersona.apellido);
    // setEmpresa(selectedPersona.empresa);
    // setCargo(selectedPersona.cargo);
    setShowModal(true);
  }

  const getInfo = (id) =>{
    console.log(id)
    let personaService = new PersonaService();
    personaService.get(id).then(data => setPersonas(data))
  } 

  return (
    <Box m="20px">
      <Header title="TEAM" subtitle="Managing the Team Members" />
      <Menubar model={items} style={{ justifyContent: "center" }} />
      <Box
        m="40px 0 0 0"
        height="75vh"
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .name-column--cell": {
            color: colors.greenAccent[300],
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
          "& .MuiDataGrid-toolbarContainer .MuiButton-text": {
            color: `${colors.grey[100]} !important`,
          },
        }}
      >
        <DataGrid checkboxSelection rows={personas} 
                     selection={selectedPersona}  onSelectionChange={e => getInfo(e)} 
                     dataKey="id" columns={columns} components={{ Toolbar: GridToolbar }} />
        <Dialog header="Empleados" visible={showModal} style={{ width: '50vw' }} footer={renderFooter()} onHide={() => setShowModal(false)}>
          <form id="persona-form">
            <div class="formgrid grid">
              <div class="field col">
                <span className="p-float-label">
                  <InputText name="nombre" selection={selectedPersona} value={nombre} onChange={(e) => setNombre(e.target.value)} style={{ width: '100%' }} />
                  <label htmlFor="nombre">Nombre</label>
                </span>
              </div>
              <div class="field col">
                <span className="p-float-label">
                  <InputText name="apellido" value={apellido} onChange={(e) => setApellido(e.target.value)} style={{ width: '100%' }} />
                  <label htmlFor="nombre">Apellido</label>
                </span>
              </div>
            </div>
            <div class="formgrid grid">
              <div class="field col">
                <Dropdown name="empresa" value={empresa} options={nEmpresa} onChange={(e) => setEmpresa(e.target.value)} placeholder="Selecciona una empresa" style={{ width: "100%" }} />
              </div>
              <div class="field col">
                <Dropdown name="cargo" value={cargo} options={nCargo} onChange={(e) => setCargo(e.target.value)} placeholder="Selecciona un cargo" style={{ width: "100%" }} />
              </div>
            </div>
          </form>
        </Dialog>

      </Box>
    </Box>
  );
};

export default Team;